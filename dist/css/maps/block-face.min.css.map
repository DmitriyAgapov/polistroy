{"version":3,"sources":["block-face/block-face.css","block-face/block-face.scss","../styles/helpers/_mixins-svg.scss"],"names":[],"mappings":"AACA,+BCCA,gCC8EC,QAAA,aACA,iBAAA,uBF7EC,gBAAA,MAAA,MAGF,YACE,QAAA,KAGF,qBCTA,QAAA,YAAA,QAAA,YAAA,QAAA,KDaA,4BACE,OAAA,EAAA,KACA,QAAA,SAAA,QAAA,KACA,UAAA,IACA,mBAAA,WAAA,sBAAA,OAAA,cAAA,IAAA,KAAA,UAAA,IAAA,KACA,cAAA,KAAA,EAAA,KAAA,iBAAA,IAAA,IAAA,IAAA,cAAA,KAAA,IAAA,CAAA,IAAA,IACA,eAAA,OACA,SAAA,EAAA,IACA,kBAAA,OAAA,eAAA,OAAA,YAAA,OAGF,wBACE,aAAA,EAAA,kBAAA,EAAA,SAAA,CAAA,CAAA,EAGF,yBACE,YAAA,IAGF,gCACE,QAAA,GACA,MAAA,KACA,OAAA,KACA,oBAAA,OAAA,OACA,SAAA,SACA,KAAA,MACA,IAAA,KAGF,+BC1CA,QAAA,GD4CE,MAAA,KC5CF,OAAA,KD8CE,oBAAA,OAAA,OC9CF,kBAAA,eAAA,cAAA,eAAA,UAAA,eDgDE,SAAA,SACA,MAAA,EACA,OAAA,KAGF,qCACE,WAAA,EAGF,oCACE,cAAA,EAGF,4BACE,OAAA,EACA,YAAA,IAGF,yCACE,YACE,QAAA,OAIJ,yCACE,4BACE,cAAA,KAAA,EAAA,KAAA,iBAAA,IAAA,cAAA,KAAA,IAAA,CAAA","file":"../block-face.min.css","sourcesContent":[".block-face .block__text:before,\n.block-face .block__text:after {\n  display: inline-block;\n  background-image: url(\"../img/sprite.svg\");\n  background-size: 521px 497px;\n}\n\n.block-face {\n  display: none;\n}\n\n.block-face .wrapper {\n  display: flex;\n}\n\n.block-face .block__content {\n  margin: 0 auto;\n  display: grid;\n  max-width: 80%;\n  flex-flow: row wrap;\n  grid-template: auto auto/1fr 2fr;\n  grid-auto-flow: column;\n  grid-gap: 0 5vw;\n  align-items: center;\n}\n\n.block-face .block__img {\n  grid-row: 1 / 3;\n}\n\n.block-face .block__text {\n  font-weight: 500;\n}\n\n.block-face .block__text:before {\n  content: '';\n  width: 69px;\n  height: 69px;\n  background-position: -239px -370px;\n  position: absolute;\n  left: -50px;\n  top: 26px;\n}\n\n.block-face .block__text:after {\n  content: '';\n  width: 69px;\n  height: 69px;\n  background-position: -239px -370px;\n  transform: rotate(180deg);\n  position: absolute;\n  right: -0px;\n  bottom: 26px;\n}\n\n.block-face .block__text:first-child {\n  margin-top: 0;\n}\n\n.block-face .block__text:last-child {\n  margin-bottom: 0;\n}\n\n.block-face .block__subtext {\n  margin: 0;\n  font-weight: 700;\n}\n\n@media only screen and (min-width: 768px) {\n  .block-face {\n    display: block;\n  }\n}\n\n@media only screen and (max-width: 767px) {\n  .block-face .block__content {\n    grid-template: auto auto/1fr;\n  }\n}","@import \"../../styles/helpers/_helpers\";\n\n.block-face {\n    display: none;\n    @include min-screen(768px) {\n        display: block;\n    }\n    .wrapper {\n        display: flex;\n    }\n    .block__content {\n        margin: 0 auto;\n        display: grid;\n        max-width: 80%;\n        flex-flow: row wrap;\n        grid-template: auto auto/1fr 2fr;\n        grid-auto-flow: column;\n        grid-gap: 0 5vw;\n        align-items: center;\n        @include max-screen(767px) {\n            grid-template: auto auto/1fr;\n        }\n    }\n    .block__img {\n        grid-row: 1 / 3;\n    }\n    .block__text {\n        font-weight: 500;\n        &:before {\n            content: '';\n            @include svgsprite(dquotes);\n            position: absolute;\n            left: -50px;\n            top: 26px;\n        }\n        &:after {\n            content: '';\n            @include svgsprite(dquotes);\n            transform: rotate(180deg);\n            position: absolute;\n            right: -0px;\n            bottom: 26px;\n        }\n    }\n    .block__text:first-child {\n        margin-top: 0;\n    }\n    .block__text:last-child {\n        margin-bottom: 0;\n    }\n    .block__subtext {\n        margin: 0;\n        font-weight: 700;\n    }\n}\n","////\r\n/// @author Mike Street\r\n/// @group Sprite\r\n////\r\n\r\n\r\n// The following variable and function originate from the sass-mq library.\r\n// If you have already included it, you can eliminate the below\r\n// https://github.com/sass-mq/sass-mq/blob/master/_mq.scss\r\n\r\n/// Base font size on the `<body>` element\r\n/// @type Number (unit)\r\n$mq-base-font-size: 16px !default;\r\n\r\n/// Convert pixels to ems\r\n///\r\n/// @param {Number} $px - value to convert\r\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\r\n///\r\n/// @example scss\r\n///  $font-size-in-ems: mq-px2em(16px);\r\n///  p { font-size: mq-px2em(16px); }\r\n///\r\n/// @requires $mq-base-font-size\r\n/// @returns {Number}\r\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\r\n    @if unitless($px) {\r\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\r\n        @return mq-px2em($px + 0px); // That may fail.\r\n    } @else if unit($px) == em {\r\n        @return $px;\r\n    }\r\n    @return $px;\r\n    // @return ($px / $base-font-size) * 1em;\r\n}\r\n\r\n\r\n/// Set the `$sprite` map\r\n/// @group sprite\r\n$sprite: map-get($icons, sprite) !default;\r\n\r\n/// Retrive an attributes value for a specific icon in the sprite map\r\n/// @param {string} $icon - The name of the icon\r\n/// @param {string} $attr - The attribute you wish to retrieve (e.g. width)\r\n@function sprite-attr($icon, $attr) {\r\n\t$newIcon: map-get($icons, $icon);\r\n\t@if $newIcon == null {\r\n\t\t@warn \"Can't find an icon with the name #{$icon}\";\r\n\t}\r\n\t@return map-get($newIcon, $attr);\r\n}\r\n\r\n/// Create a map with the specified icon of attributes\r\n/// @param {string} $icon - The name of the icon\r\n@function icon-attr($icon) {\r\n\t$attr: (\r\n\t\twidth: sprite-attr($icon, width),\r\n\t\theight: sprite-attr($icon, height),\r\n\t\tx: sprite-attr($icon, backgroundX),\r\n\t\ty: sprite-attr($icon, backgroundY)\r\n\t);\r\n\r\n\t@return $attr;\r\n}\r\n\r\n/// Get the width of an icon in em\r\n/// @param {string} $icon - The name of the icon\r\n@function icon_width($icon) {\r\n\t@return mq-px2em(sprite-attr($icon, width));\r\n}\r\n\r\n/// Get the height of an icon in em\r\n/// @param {string} $icon - The name of the icon\r\n@function icon_height($icon) {\r\n\t@return mq-px2em(sprite-attr($icon, height));\r\n}\r\n\r\n/// Assign the correct SVG background image and dimensions to the element\r\n%svgsprite {\r\n\tdisplay: inline-block;\r\n\tbackground-image: url(map-get($sprite, svgPath));\r\n\tbackground-size: mq-px2em(map-get($sprite, width)) mq-px2em(map-get($sprite, height));\r\n}\r\n\r\n\r\n/// Add an SVG sprite icon using em positioning\r\n/// @param {string} $icon - The name of the icon\r\n/// @param {string} $type [all] - The properties wanted (can be `all`, `size` or `bg`).\r\n/// - `all` ensures the icon has the background, position and size.\r\n/// - `size` is just for dimensions\r\n/// - `bg` just  applies the backgrounds to an element\r\n/// @example scss - Usage\r\n/// .class {\r\n/// \t@include sprite(arrow);\r\n/// \t&:hover {\r\n/// \t\t@include sprite(arrowDown, bg)\r\n/// \t}\r\n/// }\r\n///\r\n/// @example css - Output\r\n/// .class {\r\n/// \tdisplay: inline-block;\r\n/// \tbackground-image: url(\"../img/sprite.svg\");\r\n/// \tbackground-size: 34.25em 32.1875em;\r\n/// }\r\n///\r\n///\r\n/// .class {\r\n/// \twidth: 1.3125em;\r\n/// \theight: 1.3125em;\r\n/// \tbackground-position: -0.3125em -0.3125em;\r\n/// }\r\n/// .class:hover {\r\n/// \tbackground-position: -2.25em -2.25em;\r\n/// }\r\n@mixin svgsprite($icon, $type: all) {\r\n\t@if $type == all {\r\n\t\t// Shares the backgrounds\r\n\t\t@extend %svgsprite;\r\n\t}\r\n\r\n\t$iconMap: icon-attr($icon);\r\n\r\n\t// Outputs dimensions in em\r\n\t@if $type == all or $type == size {\r\n\t\twidth: mq-px2em(map-get($iconMap, width) + 1);\r\n\t\theight: mq-px2em(map-get($iconMap, height) + 1);\r\n\t}\r\n\r\n\t// Outputs background position in em\r\n\t@if $type == all or $type == bg {\r\n\t\tbackground-position: mq-px2em(map-get($iconMap, x) - 5) mq-px2em(map-get($iconMap, y) - 5);\r\n\t}\r\n}\r\n"]}